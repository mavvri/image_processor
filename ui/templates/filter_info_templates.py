from .formula_renderer import FormulaRenderer

class FilterInfoTemplates:
    """
    HTML templates for filter information with mathematical formulas
    """
    
    @staticmethod
    def get_base_template():
        """Get base HTML template with styling"""
        return f"""
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            {FormulaRenderer.get_formula_css()}
            <style>
            body {{
                font-family: -apple-system, BlinkMacSystemFont, 'SF Pro Display', system-ui, sans-serif;
                line-height: 1.6;
                color: #1e293b;
                background: #f8fafc;
                margin: 0;
                padding: 20px;
            }}
            
            .filter-category {{
                margin: 24px 0;
                padding: 20px;
                background: white;
                border-radius: 16px;
                border: 1px solid #e2e8f0;
            }}
            
            .category-title {{
                color: #1d4ed8;
                font-size: 20px;
                font-weight: 700;
                margin-bottom: 20px;
                padding-bottom: 8px;
                border-bottom: 2px solid #1d4ed8;
            }}
            
            .filter-item {{
                margin: 16px 0;
                padding: 16px;
                background: #f8fafc;
                border-radius: 12px;
                border-left: 4px solid #64748b;
            }}
            
            .filter-name {{
                color: #1e40af;
                font-size: 16px;
                font-weight: 600;
                margin-bottom: 12px;
            }}
            
            .filter-description {{
                color: #475569;
                font-size: 14px;
                margin: 8px 0;
                line-height: 1.6;
            }}
            
            .applications {{
                background: rgba(29, 78, 216, 0.05);
                padding: 12px;
                border-radius: 8px;
                margin-top: 12px;
                border: 1px solid rgba(29, 78, 216, 0.1);
            }}
            
            .applications-title {{
                color: #1d4ed8;
                font-weight: 600;
                font-size: 13px;
                margin-bottom: 8px;
            }}
            
            .applications-list {{
                color: #64748b;
                font-size: 12px;
                line-height: 1.5;
            }}
            
            .complexity-badge {{
                display: inline-block;
                padding: 4px 8px;
                background: #fef3c7;
                color: #92400e;
                border-radius: 6px;
                font-size: 11px;
                font-weight: 600;
                margin-left: 8px;
            }}
            </style>
        </head>
        <body>
            {{content}}
        </body>
        </html>
        """
    
    @staticmethod
    def get_preprocessing_filters():
        """Get preprocessing filters information"""
        filters = {
            "Promediador": {
                "formula": "H(x,y) = <div class='fraction'><span class='numerator'>1</span><span class='denominator'>n¬≤</span></div> <span class='sigma'>Œ£</span><sub>i,j</sub> I(x+i, y+j)",
                "description": "Reduce el ruido mediante el promedio local de p√≠xeles en una ventana de tama√±o n√ón. Es efectivo contra ruido gaussiano pero puede difuminar bordes.",
                "complexity": "O(n¬≤)",
                "applications": [
                    "Reducci√≥n de ruido en fotograf√≠as digitales",
                    "Preprocesamiento para sistemas de OCR",
                    "Suavizado de texturas en im√°genes naturales",
                    "Mejora de im√°genes con ruido de sensor"
                ]
            },
            "Promediador Pesado": {
                "formula": "W = <div class='fraction'><span class='numerator'>1</span><span class='denominator'>16</span></div> √ó [1,2,1; 2,4,2; 1,2,1]",
                "description": "Aplicaci√≥n de un kernel gaussiano discreto que asigna mayor peso al p√≠xel central. Preserva mejor los bordes que el promedio simple.",
                "complexity": "O(1)",
                "applications": [
                    "Suavizado selectivo manteniendo detalles",
                    "Reducci√≥n de ruido con preservaci√≥n de bordes",
                    "Preprocesamiento de im√°genes m√©dicas",
                    "Mejora de calidad en im√°genes de baja resoluci√≥n"
                ]
            },
            "Mediana": {
                "formula": "I<sub>out</sub>(x,y) = median{I(x+i,y+j) | (i,j) ‚àà W}",
                "description": "Reemplaza cada p√≠xel por la mediana de su vecindario. Excelente para eliminar ruido impulsivo (sal y pimienta) mientras preserva bordes.",
                "complexity": "O(n¬≤ log n)",
                "applications": [
                    "Eliminaci√≥n de ruido sal y pimienta",
                    "Preservaci√≥n de bordes en im√°genes ruidosas",
                    "Limpieza de im√°genes binarias",
                    "Restauraci√≥n de im√°genes da√±adas"
                ]
            },
            "Bilateral": {
                "formula": "G(x,y) = exp(-<div class='fraction'><span class='numerator'>||x-y||¬≤</span><span class='denominator'>2œÉ<sub>s</sub>¬≤</span></div>) √ó exp(-<div class='fraction'><span class='numerator'>||I(x)-I(y)||¬≤</span><span class='denominator'>2œÉ<sub>r</sub>¬≤</span></div>)",
                "description": "Combina filtrado espacial y radiom√©trico. Preserva bordes mientras suaviza √°reas homog√©neas, considerando tanto la distancia espacial como la similitud de intensidad.",
                "complexity": "O(n¬≤)",
                "applications": [
                    "Reducci√≥n de ruido con preservaci√≥n de bordes",
                    "Preprocesamiento para segmentaci√≥n",
                    "Mejora de im√°genes naturales",
                    "Suavizado selectivo en fotograf√≠a"
                ]
            },
            "Gaussiano": {
                "formula": "G(x,y) = <div class='fraction'><span class='numerator'>1</span><span class='denominator'>2œÄœÉ¬≤</span></div> exp(-<div class='fraction'><span class='numerator'>x¬≤+y¬≤</span><span class='denominator'>2œÉ¬≤</span></div>)",
                "description": "Filtro basado en la distribuci√≥n gaussiana. Proporciona suavizado natural y progresivo, ampliamente usado como paso previo a la detecci√≥n de bordes.",
                "complexity": "O(n¬≤)",
                "applications": [
                    "Desenfoques art√≠sticos controlados",
                    "Reducci√≥n de ruido de alta frecuencia",
                    "Preparaci√≥n para detecci√≥n de bordes Canny",
                    "Creaci√≥n de pir√°mides gaussianas"
                ]
            }
        }
        
        return FilterInfoTemplates._format_filter_category("üîß Filtros de Preprocesamiento", filters)
    
    @staticmethod
    def get_edge_detection_filters():
        """Get edge detection filters information"""
        filters = {
            "Roberts": {
                "formula": "|‚àáI| = ‚àö[(I(x,y)-I(x+1,y+1))¬≤ + (I(x+1,y)-I(x,y+1))¬≤]",
                "description": "Operador 2√ó2 simple y computacionalmente eficiente. Detecta bordes diagonales mediante gradientes cruzados.",
                "complexity": "O(1)",
                "applications": [
                    "Detecci√≥n r√°pida de bordes en tiempo real",
                    "Aplicaciones embebidas con recursos limitados",
                    "An√°lisis b√°sico de formas geom√©tricas",
                    "Preprocesamiento para algoritmos de seguimiento"
                ]
            },
            "Prewitt": {
                "formula": "G<sub>x</sub> = [-1,0,1; -1,0,1; -1,0,1], G<sub>y</sub> = [-1,-1,-1; 0,0,0; 1,1,1]",
                "description": "Detecta gradientes horizontales y verticales asignando igual peso a todos los p√≠xeles del borde del kernel.",
                "complexity": "O(1)",
                "applications": [
                    "Detecci√≥n de bordes en im√°genes ruidosas",
                    "An√°lisis de texturas direccionales",
                    "Segmentaci√≥n b√°sica de objetos",
                    "Extracci√≥n de caracter√≠sticas geom√©tricas"
                ]
            },
            "Sobel": {
                "formula": "G<sub>x</sub> = [-1,0,1; -2,0,2; -1,0,1], G<sub>y</sub> = [-1,-2,-1; 0,0,0; 1,2,1]",
                "description": "Versi√≥n mejorada del operador Prewitt con mayor peso en el p√≠xel central, proporcionando mejor detecci√≥n de bordes.",
                "complexity": "O(1)",
                "applications": [
                    "Detecci√≥n robusta de bordes",
                    "An√°lisis de formas y contornos",
                    "Preprocesamiento para segmentaci√≥n",
                    "Extracci√≥n de caracter√≠sticas en visi√≥n artificial"
                ]
            },
            "Kirsch": {
                "formula": "R = max|K<sub>i</sub> * I| para i=1..8 direcciones",
                "description": "Detecta bordes en 8 direcciones diferentes usando kernels direccionales. Muy sensible a la orientaci√≥n de los bordes.",
                "complexity": "O(8)",
                "applications": [
                    "Detecci√≥n direccional de bordes",
                    "An√°lisis de texturas orientadas",
                    "Reconocimiento de patrones direccionales",
                    "Clasificaci√≥n de orientaci√≥n de objetos"
                ]
            },
            "Canny": {
                "formula": "‚àáI = ‚àö[(‚àÇI/‚àÇx)¬≤ + (‚àÇI/‚àÇy)¬≤] + supresi√≥n no-m√°xima + hist√©resis",
                "description": "Algoritmo multi-etapa considerado √≥ptimo. Incluye suavizado gaussiano, c√°lculo de gradientes, supresi√≥n no-m√°xima e hist√©resis.",
                "complexity": "O(n¬≤)",
                "applications": [
                    "Detecci√≥n √≥ptima de bordes",
                    "Visi√≥n por computador avanzada",
                    "An√°lisis de formas complejas",
                    "Sistemas de navegaci√≥n aut√≥noma"
                ]
            },
            "Laplaciano": {
                "formula": "‚àá¬≤I = ‚àÇ¬≤I/‚àÇx¬≤ + ‚àÇ¬≤I/‚àÇy¬≤",
                "description": "Operador de segunda derivada que detecta cambios de intensidad en todas las direcciones simult√°neamente.",
                "complexity": "O(1)",
                "applications": [
                    "Detecci√≥n de bordes finos",
                    "Realce de detalles en im√°genes",
                    "An√°lisis de texturas isotr√≥picas",
                    "Detecci√≥n de puntos de inter√©s"
                ]
            }
        }
        
        return FilterInfoTemplates._format_filter_category("üéØ Filtros de Detecci√≥n de Bordes", filters)
    
    @staticmethod
    def get_segmentation_methods():
        """Get segmentation methods information"""
        methods = {
            "Umbral Media": {
                "formula": "T = <div class='fraction'><span class='numerator'>1</span><span class='denominator'>MN</span></div> <span class='sigma'>Œ£</span><sub>x=0</sub><sup>M-1</sup> <span class='sigma'>Œ£</span><sub>y=0</sub><sup>N-1</sup> I(x,y)",
                "description": "M√©todo de umbralizaci√≥n m√°s simple que usa la intensidad media de toda la imagen como umbral de separaci√≥n.",
                "complexity": "O(MN)",
                "applications": [
                    "Segmentaci√≥n b√°sica en im√°genes bimodales",
                    "Binarizaci√≥n r√°pida para an√°lisis inicial",
                    "Separaci√≥n fondo-objeto simple",
                    "Preprocesamiento para algoritmos m√°s complejos"
                ]
            },
            "M√©todo de Otsu": {
                "formula": "œÉ¬≤<sub>w</sub>(t) = w<sub>1</sub>(t)œÉ¬≤<sub>1</sub>(t) + w<sub>2</sub>(t)œÉ¬≤<sub>2</sub>(t)",
                "description": "Maximiza la varianza inter-clase para encontrar autom√°ticamente el umbral √≥ptimo. Asume distribuci√≥n bimodal del histograma.",
                "complexity": "O(L√óMN)",
                "applications": [
                    "Segmentaci√≥n autom√°tica sin par√°metros",
                    "Binarizaci√≥n adaptativa de documentos",
                    "An√°lisis de im√°genes m√©dicas",
                    "Control de calidad industrial"
                ]
            },
            "Multiumbralizaci√≥n": {
                "formula": "Minimiza <span class='sigma'>Œ£</span><sub>i=1</sub><sup>k</sup> w<sub>i</sub>œÉ<sub>i</sub>¬≤ para k clases",
                "description": "Extensi√≥n del m√©todo de Otsu para m√∫ltiples clases, encontrando varios umbrales √≥ptimos simult√°neamente.",
                "complexity": "O(L^k√óMN)",
                "applications": [
                    "Segmentaci√≥n de m√∫ltiples objetos",
                    "An√°lisis de im√°genes complejas",
                    "Clasificaci√≥n autom√°tica de tejidos",
                    "Segmentaci√≥n de im√°genes satelitales"
                ]
            },
            "Entrop√≠a de Kapur": {
                "formula": "H = -<span class='sigma'>Œ£</span><sub>i</sub> p<sub>i</sub> log<sub>2</sub>(p<sub>i</sub>), maximiza H<sub>total</sub>",
                "description": "Selecciona el umbral que maximiza la entrop√≠a total de las regiones segmentadas, √∫til para im√°genes complejas.",
                "complexity": "O(L√óMN)",
                "applications": [
                    "Im√°genes con m√∫ltiples intensidades",
                    "Segmentaci√≥n de texturas complejas",
                    "An√°lisis biom√©dico avanzado",
                    "Procesamiento de im√°genes naturales"
                ]
            },
            "Umbral Adaptativo": {
                "formula": "T(x,y) = Œº(x,y) - C",
                "description": "Umbral variable que se adapta a las condiciones locales de iluminaci√≥n en cada regi√≥n de la imagen.",
                "complexity": "O(w¬≤√óMN)",
                "applications": [
                    "Documentos con iluminaci√≥n irregular",
                    "Im√°genes con sombras variables",
                    "OCR robusto en condiciones adversas",
                    "An√°lisis de im√°genes hist√≥ricas"
                ]
            }
        }
        
        return FilterInfoTemplates._format_filter_category("‚úÇÔ∏è M√©todos de Segmentaci√≥n", methods)
    
    @staticmethod
    def _format_filter_category(title, filters):
        """Format a category of filters into HTML"""
        content = f'<div class="filter-category"><h2 class="category-title">{title}</h2>'
        
        for name, info in filters.items():
            formula_html = FormulaRenderer.render_formula(
                FormulaRenderer.convert_latex_to_html(info['formula']),
                f"Complejidad: {info['complexity']}"
            )
            
            applications_html = '<br>'.join([f"‚Ä¢ {app}" for app in info['applications']])
            
            content += f"""
            <div class="filter-item">
                <div class="filter-name">
                    üîπ {name}
                    <span class="complexity-badge">{info['complexity']}</span>
                </div>
                {formula_html}
                <div class="filter-description">{info['description']}</div>
                <div class="applications">
                    <div class="applications-title">üéØ Aplicaciones:</div>
                    <div class="applications-list">{applications_html}</div>
                </div>
            </div>
            """
        
        content += '</div>'
        return content
    
    @staticmethod
    def get_complete_info():
        """Get complete filter information"""
        preprocessing = FilterInfoTemplates.get_preprocessing_filters()
        edge_detection = FilterInfoTemplates.get_edge_detection_filters()
        segmentation = FilterInfoTemplates.get_segmentation_methods()
        
        complete_content = f"""
        <div style="text-align: center; margin-bottom: 30px;">
            <h1 style="color: #1d4ed8; font-size: 24px; font-weight: 800; margin-bottom: 8px;">
                üìö Gu√≠a Completa de Procesamiento Digital de Im√°genes
            </h1>
            <p style="color: #64748b; font-size: 14px; font-weight: 500;">
                Fundamentos Matem√°ticos y Aplicaciones Pr√°cticas ‚Ä¢ Versi√≥n 3.2
            </p>
        </div>
        {preprocessing}
        {edge_detection}
        {segmentation}
        """
        
        return FilterInfoTemplates.get_base_template().format(content=complete_content)
